#!/usr/bin/env php
<?php
include __DIR__ . '/../../include/arhone/autoload.php';

set_time_limit(0);

if (!empty($argv)) {

    array_shift($argv);
    $argv = array_flip($argv);

    if (isset($argv['--develop']) || isset($argv['-d'])) {

        $_SERVER['DEVELOP'] = true; // Режим разрабочика
        unset($argv['--develop']);
        unset($argv['-d']);

    }

    if (isset($argv['--test']) || isset($argv['-t'])) {

        $_SERVER['TEST'] = true; // Режим тестирования
        unset($argv['--test']);
        unset($argv['-t']);

    }

    if (isset($argv['-td']) || isset($argv['-dt'])) {

        $_SERVER['DEVELOP'] = true; // Режим разрабочика
        $_SERVER['TEST'] = true; // Режим тестирования
        unset($argv['-td']);
        unset($argv['-dt']);

    }

    $Builder = new arhone\construction\Builder();
    $Builder->instruction(include __DIR__ . '/../../config/arhone/builder.php');
    try {

        // Регистрация триггеров
        $Trigger = $Builder->make('Trigger');
        foreach (include __DIR__ . '/../../config/arhone/handler.php' as $instruction) {

            if (isset($instruction['pattern']) && isset($instruction['class']) && isset($instruction['method'])) {

                $Trigger->add($instruction['pattern'], function ($match, $data) use ($instruction, $Builder) {

                    $Class = $Builder->make($instruction['class']);

                    $array = [];
                    foreach ($instruction['argument'] ?? [] as $key => $value) {

                        if ($value === 0) {
                            $array[$key] = $data;
                        } elseif ((int)$value && isset($match[(int)$value])) {
                           $array[$key] = $match[(int)$value];
                        } elseif ($Builder->has($value)) {
                            $array[$key] = $Builder->make($value);
                        }

                    }

                    return $Class->{$instruction['method']}(...$array);

                }, [
                    'name'     => $instruction['name']     ?? $instruction['class'],
                    'position' => $instruction['position'] ?? null,
                    'break'    => $instruction['break']    ?? null,
                    'status'   => $instruction['status']   ?? true
                ]);

            }

        }

        echo $Trigger->run('console:' . implode(' ', array_flip($argv)));

    } catch (Exception $Exception) {

        echo $Exception->getMessage() ,
        PHP_EOL , $Exception->getTraceAsString() ,
        PHP_EOL;

    }


}
