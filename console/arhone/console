#!/usr/bin/env php
<?php

$_SERVER['ENVIRONMENT'] = 'develop'; // Режим разрабочика

if ($environment = getenv('ARHONE_ENVIRONMENT')) {
    $_SERVER['ENVIRONMENT'] = $environment;
}

include __DIR__ . '/../../include/arhone/autoload.php';

set_time_limit(0);

if (!empty($argv)) {

    array_shift($argv);
    $argv = array_flip($argv);

    if ($_SERVER['ENVIRONMENT'] == 'production' || isset($argv['--production']) || isset($argv['-p'])) {

        $_SERVER['ENVIRONMENT'] = 'production';
        unset($argv['--production']);
        unset($argv['-p']);

    }

    if (isset($argv['--test']) || isset($argv['-t'])) {

        $_SERVER['ENVIRONMENT'] = 'test'; // Режим тестирования
        unset($argv['--test']);
        unset($argv['-t']);

    }

    $builder = new arhone\construction\Builder();
    $builder->instruction(include __DIR__ . '/../../config/arhone/builder.php');
    try {

        // Регистрация триггеров
        $trigger = $builder->make('Trigger');
        foreach (include __DIR__ . '/../../config/arhone/handler.php' as $instruction) {

            if (isset($instruction['pattern']) && isset($instruction['class']) && isset($instruction['method'])) {

                $trigger->add($instruction['pattern'], function ($match, $data) use ($instruction, $builder) {

                    $class = $builder->make($instruction['class']);

                    $array = [];
                    foreach ($instruction['argument'] ?? [] as $key => $value) {

                        if ($value === 0) {
                            $array[$key] = $data;
                        } elseif ((int)$value && isset($match[(int)$value])) {
                           $array[$key] = $match[(int)$value];
                        } elseif ($builder->has($value)) {
                            $array[$key] = $builder->make($value);
                        }

                    }

                    return $class->{$instruction['method']}(...$array);

                }, [
                    'name'     => $instruction['name']     ?? $instruction['class'],
                    'position' => $instruction['position'] ?? null,
                    'break'    => $instruction['break']    ?? null,
                    'status'   => $instruction['status']   ?? true
                ]);

            }

        }

        echo $trigger->run('console:' . implode(' ', array_flip($argv)));

    } catch (Exception $exception) {

        echo $exception->getMessage() ,
        PHP_EOL , $exception->getTraceAsString() ,
        PHP_EOL;

    }

}
